/*
 * generated by Xtext
 */
package unige.dibris.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class KPLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class KernelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Kernel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cThreadsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNINTTerminalRuleCall_1_0 = (RuleCall)cNAssignment_1.eContents().get(0);
		private final Keyword cGroupKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMINTTerminalRuleCall_3_0 = (RuleCall)cMAssignment_3.eContents().get(0);
		private final Assignment cProceduresAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProceduresProcedureParserRuleCall_4_0 = (RuleCall)cProceduresAssignment_4.eContents().get(0);
		private final Keyword cMainKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMainAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMainStatementParserRuleCall_6_0 = (RuleCall)cMainAssignment_6.eContents().get(0);
		
		//Kernel:
		//	"threads:" n=INT "group:" m=INT procedures+=Procedure* "main:" main=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"threads:" n=INT "group:" m=INT procedures+=Procedure* "main:" main=Statement
		public Group getGroup() { return cGroup; }

		//"threads:"
		public Keyword getThreadsKeyword_0() { return cThreadsKeyword_0; }

		//n=INT
		public Assignment getNAssignment_1() { return cNAssignment_1; }

		//INT
		public RuleCall getNINTTerminalRuleCall_1_0() { return cNINTTerminalRuleCall_1_0; }

		//"group:"
		public Keyword getGroupKeyword_2() { return cGroupKeyword_2; }

		//m=INT
		public Assignment getMAssignment_3() { return cMAssignment_3; }

		//INT
		public RuleCall getMINTTerminalRuleCall_3_0() { return cMINTTerminalRuleCall_3_0; }

		//procedures+=Procedure*
		public Assignment getProceduresAssignment_4() { return cProceduresAssignment_4; }

		//Procedure
		public RuleCall getProceduresProcedureParserRuleCall_4_0() { return cProceduresProcedureParserRuleCall_4_0; }

		//"main:"
		public Keyword getMainKeyword_5() { return cMainKeyword_5; }

		//main=Statement
		public Assignment getMainAssignment_6() { return cMainAssignment_6; }

		//Statement
		public RuleCall getMainStatementParserRuleCall_6_0() { return cMainStatementParserRuleCall_6_0; }
	}

	public class ProcedureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Procedure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProcedureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cZAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cZIDTerminalRuleCall_1_0 = (RuleCall)cZAssignment_1.eContents().get(0);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXIDTerminalRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		private final Assignment cBodyAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBodyStatementParserRuleCall_3_0 = (RuleCall)cBodyAssignment_3.eContents().get(0);
		
		//Procedure:
		//	"procedure:" z=ID x=ID body=Statement;
		@Override public ParserRule getRule() { return rule; }

		//"procedure:" z=ID x=ID body=Statement
		public Group getGroup() { return cGroup; }

		//"procedure:"
		public Keyword getProcedureKeyword_0() { return cProcedureKeyword_0; }

		//z=ID
		public Assignment getZAssignment_1() { return cZAssignment_1; }

		//ID
		public RuleCall getZIDTerminalRuleCall_1_0() { return cZIDTerminalRuleCall_1_0; }

		//x=ID
		public Assignment getXAssignment_2() { return cXAssignment_2; }

		//ID
		public RuleCall getXIDTerminalRuleCall_2_0() { return cXIDTerminalRuleCall_2_0; }

		//body=Statement
		public Assignment getBodyAssignment_3() { return cBodyAssignment_3; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_3_0() { return cBodyStatementParserRuleCall_3_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBranchParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInvokeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssignParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cReadParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cWriteParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cBarrierParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cBlockParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cLSwitchParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final RuleCall cGSwitchParserRuleCall_10 = (RuleCall)cAlternatives.eContents().get(10);
		private final RuleCall cSkipParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		
		//Statement returns Stat:
		//	Decl | Branch | Loop | Invoke | Assign | Read | Write | Barrier | Block | LSwitch | GSwitch | Skip;
		@Override public ParserRule getRule() { return rule; }

		//Decl | Branch | Loop | Invoke | Assign | Read | Write | Barrier | Block | LSwitch | GSwitch | Skip
		public Alternatives getAlternatives() { return cAlternatives; }

		//Decl
		public RuleCall getDeclParserRuleCall_0() { return cDeclParserRuleCall_0; }

		//Branch
		public RuleCall getBranchParserRuleCall_1() { return cBranchParserRuleCall_1; }

		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }

		//Invoke
		public RuleCall getInvokeParserRuleCall_3() { return cInvokeParserRuleCall_3; }

		//Assign
		public RuleCall getAssignParserRuleCall_4() { return cAssignParserRuleCall_4; }

		//Read
		public RuleCall getReadParserRuleCall_5() { return cReadParserRuleCall_5; }

		//Write
		public RuleCall getWriteParserRuleCall_6() { return cWriteParserRuleCall_6; }

		//Barrier
		public RuleCall getBarrierParserRuleCall_7() { return cBarrierParserRuleCall_7; }

		//Block
		public RuleCall getBlockParserRuleCall_8() { return cBlockParserRuleCall_8; }

		//LSwitch
		public RuleCall getLSwitchParserRuleCall_9() { return cLSwitchParserRuleCall_9; }

		//GSwitch
		public RuleCall getGSwitchParserRuleCall_10() { return cGSwitchParserRuleCall_10; }

		//Skip
		public RuleCall getSkipParserRuleCall_11() { return cSkipParserRuleCall_11; }
	}

	public class DeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Decl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLocalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVarIDTerminalRuleCall_2_0 = (RuleCall)cVarAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Decl returns Stat:
		//	{Decl} "local" var=ID "in" body=Statement;
		@Override public ParserRule getRule() { return rule; }

		//{Decl} "local" var=ID "in" body=Statement
		public Group getGroup() { return cGroup; }

		//{Decl}
		public Action getDeclAction_0() { return cDeclAction_0; }

		//"local"
		public Keyword getLocalKeyword_1() { return cLocalKeyword_1; }

		//var=ID
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_2_0() { return cVarIDTerminalRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}

	public class BranchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Branch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBranchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cThenKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLeftAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLeftStatementParserRuleCall_4_0 = (RuleCall)cLeftAssignment_4.eContents().get(0);
		private final Keyword cElseKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRightAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRightStatementParserRuleCall_6_0 = (RuleCall)cRightAssignment_6.eContents().get(0);
		
		//Branch returns Stat:
		//	{Branch} "if" guard=Expression "then" left=Statement "else" right=Statement;
		@Override public ParserRule getRule() { return rule; }

		//{Branch} "if" guard=Expression "then" left=Statement "else" right=Statement
		public Group getGroup() { return cGroup; }

		//{Branch}
		public Action getBranchAction_0() { return cBranchAction_0; }

		//"if"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//guard=Expression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_0() { return cGuardExpressionParserRuleCall_2_0; }

		//"then"
		public Keyword getThenKeyword_3() { return cThenKeyword_3; }

		//left=Statement
		public Assignment getLeftAssignment_4() { return cLeftAssignment_4; }

		//Statement
		public RuleCall getLeftStatementParserRuleCall_4_0() { return cLeftStatementParserRuleCall_4_0; }

		//"else"
		public Keyword getElseKeyword_5() { return cElseKeyword_5; }

		//right=Statement
		public Assignment getRightAssignment_6() { return cRightAssignment_6; }

		//Statement
		public RuleCall getRightStatementParserRuleCall_6_0() { return cRightStatementParserRuleCall_6_0; }
	}

	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Loop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLoopAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWhileKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGuardAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGuardExpressionParserRuleCall_2_0 = (RuleCall)cGuardAssignment_2.eContents().get(0);
		private final Keyword cDoKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBodyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBodyStatementParserRuleCall_4_0 = (RuleCall)cBodyAssignment_4.eContents().get(0);
		
		//Loop returns Stat:
		//	{Loop} "while" guard=Expression "do" body=Statement;
		@Override public ParserRule getRule() { return rule; }

		//{Loop} "while" guard=Expression "do" body=Statement
		public Group getGroup() { return cGroup; }

		//{Loop}
		public Action getLoopAction_0() { return cLoopAction_0; }

		//"while"
		public Keyword getWhileKeyword_1() { return cWhileKeyword_1; }

		//guard=Expression
		public Assignment getGuardAssignment_2() { return cGuardAssignment_2; }

		//Expression
		public RuleCall getGuardExpressionParserRuleCall_2_0() { return cGuardExpressionParserRuleCall_2_0; }

		//"do"
		public Keyword getDoKeyword_3() { return cDoKeyword_3; }

		//body=Statement
		public Assignment getBodyAssignment_4() { return cBodyAssignment_4; }

		//Statement
		public RuleCall getBodyStatementParserRuleCall_4_0() { return cBodyStatementParserRuleCall_4_0; }
	}

	public class InvokeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Invoke");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInvokeAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFunAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFunIDTerminalRuleCall_1_0 = (RuleCall)cFunAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cArgAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cArgExpressionParserRuleCall_3_0 = (RuleCall)cArgAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Invoke returns Stat:
		//	{Invoke} fun=ID "(" arg=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//{Invoke} fun=ID "(" arg=Expression ")"
		public Group getGroup() { return cGroup; }

		//{Invoke}
		public Action getInvokeAction_0() { return cInvokeAction_0; }

		//fun=ID
		public Assignment getFunAssignment_1() { return cFunAssignment_1; }

		//ID
		public RuleCall getFunIDTerminalRuleCall_1_0() { return cFunIDTerminalRuleCall_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//arg=Expression
		public Assignment getArgAssignment_3() { return cArgAssignment_3; }

		//Expression
		public RuleCall getArgExpressionParserRuleCall_3_0() { return cArgExpressionParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class AssignElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assign");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAssignAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarIDTerminalRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpExpressionParserRuleCall_3_0 = (RuleCall)cExpAssignment_3.eContents().get(0);
		
		//Assign returns Stat:
		//	{Assign} var=ID ":=" exp=Expression;
		@Override public ParserRule getRule() { return rule; }

		//{Assign} var=ID ":=" exp=Expression
		public Group getGroup() { return cGroup; }

		//{Assign}
		public Action getAssignAction_0() { return cAssignAction_0; }

		//var=ID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//ID
		public RuleCall getVarIDTerminalRuleCall_1_0() { return cVarIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//exp=Expression
		public Assignment getExpAssignment_3() { return cExpAssignment_3; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_3_0() { return cExpExpressionParserRuleCall_3_0; }
	}

	public class ReadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Read");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cReadAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRdKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cLocAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cLocINTTerminalRuleCall_5_0 = (RuleCall)cLocAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Read returns Stat:
		//	{Read} name=ID ":=" "rd" "(" loc=INT ")";
		@Override public ParserRule getRule() { return rule; }

		//{Read} name=ID ":=" "rd" "(" loc=INT ")"
		public Group getGroup() { return cGroup; }

		//{Read}
		public Action getReadAction_0() { return cReadAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_2() { return cColonEqualsSignKeyword_2; }

		//"rd"
		public Keyword getRdKeyword_3() { return cRdKeyword_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//loc=INT
		public Assignment getLocAssignment_5() { return cLocAssignment_5; }

		//INT
		public RuleCall getLocINTTerminalRuleCall_5_0() { return cLocINTTerminalRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class WriteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Write");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cWriteAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cWrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLocAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLocINTTerminalRuleCall_3_0 = (RuleCall)cLocAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExpAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExpExpressionParserRuleCall_5_0 = (RuleCall)cExpAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Write returns Stat:
		//	{Write} "wr" "(" loc=INT "," exp=Expression ")";
		@Override public ParserRule getRule() { return rule; }

		//{Write} "wr" "(" loc=INT "," exp=Expression ")"
		public Group getGroup() { return cGroup; }

		//{Write}
		public Action getWriteAction_0() { return cWriteAction_0; }

		//"wr"
		public Keyword getWrKeyword_1() { return cWrKeyword_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }

		//loc=INT
		public Assignment getLocAssignment_3() { return cLocAssignment_3; }

		//INT
		public RuleCall getLocINTTerminalRuleCall_3_0() { return cLocINTTerminalRuleCall_3_0; }

		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//exp=Expression
		public Assignment getExpAssignment_5() { return cExpAssignment_5; }

		//Expression
		public RuleCall getExpExpressionParserRuleCall_5_0() { return cExpExpressionParserRuleCall_5_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}

	public class BarrierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Barrier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBarrierAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBarrierKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Barrier returns Stat:
		//	{Barrier} "barrier";
		@Override public ParserRule getRule() { return rule; }

		//{Barrier} "barrier"
		public Group getGroup() { return cGroup; }

		//{Barrier}
		public Action getBarrierAction_0() { return cBarrierAction_0; }

		//"barrier"
		public Keyword getBarrierKeyword_1() { return cBarrierKeyword_1; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cStatsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cStatsStatementParserRuleCall_2_0_0 = (RuleCall)cStatsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Block returns Stat:
		//	{Block} "{" (stats+=Statement ";")+ "}";
		@Override public ParserRule getRule() { return rule; }

		//{Block} "{" (stats+=Statement ";")+ "}"
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(stats+=Statement ";")+
		public Group getGroup_2() { return cGroup_2; }

		//stats+=Statement
		public Assignment getStatsAssignment_2_0() { return cStatsAssignment_2_0; }

		//Statement
		public RuleCall getStatsStatementParserRuleCall_2_0_0() { return cStatsStatementParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class LSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLswitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCasesINTTerminalRuleCall_2_0_0 = (RuleCall)cCasesAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStatsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStatsStatementParserRuleCall_2_2_0 = (RuleCall)cStatsAssignment_2_2.eContents().get(0);
		
		//LSwitch returns Stat:
		//	{LSwitch} "lswitch" (cases+=INT ":" stats+=Statement)+;
		@Override public ParserRule getRule() { return rule; }

		//{LSwitch} "lswitch" (cases+=INT ":" stats+=Statement)+
		public Group getGroup() { return cGroup; }

		//{LSwitch}
		public Action getLSwitchAction_0() { return cLSwitchAction_0; }

		//"lswitch"
		public Keyword getLswitchKeyword_1() { return cLswitchKeyword_1; }

		//(cases+=INT ":" stats+=Statement)+
		public Group getGroup_2() { return cGroup_2; }

		//cases+=INT
		public Assignment getCasesAssignment_2_0() { return cCasesAssignment_2_0; }

		//INT
		public RuleCall getCasesINTTerminalRuleCall_2_0_0() { return cCasesINTTerminalRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//stats+=Statement
		public Assignment getStatsAssignment_2_2() { return cStatsAssignment_2_2; }

		//Statement
		public RuleCall getStatsStatementParserRuleCall_2_2_0() { return cStatsStatementParserRuleCall_2_2_0; }
	}

	public class GSwitchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GSwitch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGSwitchAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGswitchKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cCasesAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cCasesINTTerminalRuleCall_2_0_0 = (RuleCall)cCasesAssignment_2_0.eContents().get(0);
		private final Keyword cColonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStatsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cStatsStatementParserRuleCall_2_2_0 = (RuleCall)cStatsAssignment_2_2.eContents().get(0);
		
		//GSwitch returns Stat:
		//	{GSwitch} "gswitch" (cases+=INT ":" stats+=Statement)+;
		@Override public ParserRule getRule() { return rule; }

		//{GSwitch} "gswitch" (cases+=INT ":" stats+=Statement)+
		public Group getGroup() { return cGroup; }

		//{GSwitch}
		public Action getGSwitchAction_0() { return cGSwitchAction_0; }

		//"gswitch"
		public Keyword getGswitchKeyword_1() { return cGswitchKeyword_1; }

		//(cases+=INT ":" stats+=Statement)+
		public Group getGroup_2() { return cGroup_2; }

		//cases+=INT
		public Assignment getCasesAssignment_2_0() { return cCasesAssignment_2_0; }

		//INT
		public RuleCall getCasesINTTerminalRuleCall_2_0_0() { return cCasesINTTerminalRuleCall_2_0_0; }

		//":"
		public Keyword getColonKeyword_2_1() { return cColonKeyword_2_1; }

		//stats+=Statement
		public Assignment getStatsAssignment_2_2() { return cStatsAssignment_2_2; }

		//Statement
		public RuleCall getStatsStatementParserRuleCall_2_2_0() { return cStatsStatementParserRuleCall_2_2_0; }
	}

	public class SkipElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Skip");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSkipAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSkipKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Skip returns Stat:
		//	{Skip} "skip";
		@Override public ParserRule getRule() { return rule; }

		//{Skip} "skip"
		public Group getGroup() { return cGroup; }

		//{Skip}
		public Action getSkipAction_0() { return cSkipAction_0; }

		//"skip"
		public Keyword getSkipKeyword_1() { return cSkipKeyword_1; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cAddParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns Expr:
		//	Add;
		@Override public ParserRule getRule() { return rule; }

		//Add
		public RuleCall getAddParserRuleCall() { return cAddParserRuleCall; }
	}

	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Add");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMulParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBinaryExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightMulParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Add returns Expr:
		//	Mul | {BinaryExpr} ({BinaryExpr.left=current} op=("+" | "-") right=Mul)*;
		@Override public ParserRule getRule() { return rule; }

		//Mul | {BinaryExpr} ({BinaryExpr.left=current} op=("+" | "-") right=Mul)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//Mul
		public RuleCall getMulParserRuleCall_0() { return cMulParserRuleCall_0; }

		//{BinaryExpr} ({BinaryExpr.left=current} op=("+" | "-") right=Mul)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr}
		public Action getBinaryExprAction_1_0() { return cBinaryExprAction_1_0; }

		//({BinaryExpr.left=current} op=("+" | "-") right=Mul)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_1_0() { return cBinaryExprLeftAction_1_1_0; }

		//op=("+" | "-")
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//"+" | "-"
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_1_0_0() { return cOpPlusSignKeyword_1_1_1_0_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_1_0_1; }

		//right=Mul
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//Mul
		public RuleCall getRightMulParserRuleCall_1_1_2_0() { return cRightMulParserRuleCall_1_1_2_0; }
	}

	public class MulElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mul");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cBinaryExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cBinaryExprLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Mul returns Expr:
		//	PrimaryExpression | {BinaryExpr} ({BinaryExpr.left=current} op=("*" | "/") right=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }

		//PrimaryExpression | {BinaryExpr} ({BinaryExpr.left=current} op=("*" | "/") right=PrimaryExpression)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }

		//{BinaryExpr} ({BinaryExpr.left=current} op=("*" | "/") right=PrimaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//{BinaryExpr}
		public Action getBinaryExprAction_1_0() { return cBinaryExprAction_1_0; }

		//({BinaryExpr.left=current} op=("*" | "/") right=PrimaryExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{BinaryExpr.left=current}
		public Action getBinaryExprLeftAction_1_1_0() { return cBinaryExprLeftAction_1_1_0; }

		//op=("*" | "/")
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//"*" | "/"
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_1_0_0() { return cOpAsteriskKeyword_1_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_1_0_1() { return cOpSolidusKeyword_1_1_1_0_1; }

		//right=PrimaryExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_1_2_0; }
	}

	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cVarParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGidParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLidParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimaryExpression returns Expr:
		//	"(" Expression ")" | Var | Val | Gid | Lid;
		@Override public ParserRule getRule() { return rule; }

		//"(" Expression ")" | Var | Val | Gid | Lid
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//Var
		public RuleCall getVarParserRuleCall_1() { return cVarParserRuleCall_1; }

		//Val
		public RuleCall getValParserRuleCall_2() { return cValParserRuleCall_2; }

		//Gid
		public RuleCall getGidParserRuleCall_3() { return cGidParserRuleCall_3; }

		//Lid
		public RuleCall getLidParserRuleCall_4() { return cLidParserRuleCall_4; }
	}

	public class VarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Var");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Var returns Expr:
		//	{Var} name=ID;
		@Override public ParserRule getRule() { return rule; }

		//{Var} name=ID
		public Group getGroup() { return cGroup; }

		//{Var}
		public Action getVarAction_0() { return cVarAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ValElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Val");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_1_0 = (RuleCall)cValAssignment_1.eContents().get(0);
		
		//Val returns Expr:
		//	{Val} val=INT;
		@Override public ParserRule getRule() { return rule; }

		//{Val} val=INT
		public Group getGroup() { return cGroup; }

		//{Val}
		public Action getValAction_0() { return cValAction_0; }

		//val=INT
		public Assignment getValAssignment_1() { return cValAssignment_1; }

		//INT
		public RuleCall getValINTTerminalRuleCall_1_0() { return cValINTTerminalRuleCall_1_0; }
	}

	public class GidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Gid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGidAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Gid returns Expr:
		//	{Gid} "gid";
		@Override public ParserRule getRule() { return rule; }

		//{Gid} "gid"
		public Group getGroup() { return cGroup; }

		//{Gid}
		public Action getGidAction_0() { return cGidAction_0; }

		//"gid"
		public Keyword getGidKeyword_1() { return cGidKeyword_1; }
	}

	public class LidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Lid");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLidAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLidKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Lid returns Expr:
		//	{Lid} "lid";
		@Override public ParserRule getRule() { return rule; }

		//{Lid} "lid"
		public Group getGroup() { return cGroup; }

		//{Lid}
		public Action getLidAction_0() { return cLidAction_0; }

		//"lid"
		public Keyword getLidKeyword_1() { return cLidKeyword_1; }
	}
	
	
	private final KernelElements pKernel;
	private final ProcedureElements pProcedure;
	private final StatementElements pStatement;
	private final DeclElements pDecl;
	private final BranchElements pBranch;
	private final LoopElements pLoop;
	private final InvokeElements pInvoke;
	private final AssignElements pAssign;
	private final ReadElements pRead;
	private final WriteElements pWrite;
	private final BarrierElements pBarrier;
	private final BlockElements pBlock;
	private final LSwitchElements pLSwitch;
	private final GSwitchElements pGSwitch;
	private final SkipElements pSkip;
	private final ExpressionElements pExpression;
	private final AddElements pAdd;
	private final MulElements pMul;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final VarElements pVar;
	private final ValElements pVal;
	private final GidElements pGid;
	private final LidElements pLid;
	private final TerminalRule tINT;
	private final TerminalRule tID;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KPLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pKernel = new KernelElements();
		this.pProcedure = new ProcedureElements();
		this.pStatement = new StatementElements();
		this.pDecl = new DeclElements();
		this.pBranch = new BranchElements();
		this.pLoop = new LoopElements();
		this.pInvoke = new InvokeElements();
		this.pAssign = new AssignElements();
		this.pRead = new ReadElements();
		this.pWrite = new WriteElements();
		this.pBarrier = new BarrierElements();
		this.pBlock = new BlockElements();
		this.pLSwitch = new LSwitchElements();
		this.pGSwitch = new GSwitchElements();
		this.pSkip = new SkipElements();
		this.pExpression = new ExpressionElements();
		this.pAdd = new AddElements();
		this.pMul = new MulElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pVar = new VarElements();
		this.pVal = new ValElements();
		this.pGid = new GidElements();
		this.pLid = new LidElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("unige.dibris.KPL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Kernel:
	//	"threads:" n=INT "group:" m=INT procedures+=Procedure* "main:" main=Statement;
	public KernelElements getKernelAccess() {
		return pKernel;
	}
	
	public ParserRule getKernelRule() {
		return getKernelAccess().getRule();
	}

	//Procedure:
	//	"procedure:" z=ID x=ID body=Statement;
	public ProcedureElements getProcedureAccess() {
		return pProcedure;
	}
	
	public ParserRule getProcedureRule() {
		return getProcedureAccess().getRule();
	}

	//Statement returns Stat:
	//	Decl | Branch | Loop | Invoke | Assign | Read | Write | Barrier | Block | LSwitch | GSwitch | Skip;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Decl returns Stat:
	//	{Decl} "local" var=ID "in" body=Statement;
	public DeclElements getDeclAccess() {
		return pDecl;
	}
	
	public ParserRule getDeclRule() {
		return getDeclAccess().getRule();
	}

	//Branch returns Stat:
	//	{Branch} "if" guard=Expression "then" left=Statement "else" right=Statement;
	public BranchElements getBranchAccess() {
		return pBranch;
	}
	
	public ParserRule getBranchRule() {
		return getBranchAccess().getRule();
	}

	//Loop returns Stat:
	//	{Loop} "while" guard=Expression "do" body=Statement;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}

	//Invoke returns Stat:
	//	{Invoke} fun=ID "(" arg=Expression ")";
	public InvokeElements getInvokeAccess() {
		return pInvoke;
	}
	
	public ParserRule getInvokeRule() {
		return getInvokeAccess().getRule();
	}

	//Assign returns Stat:
	//	{Assign} var=ID ":=" exp=Expression;
	public AssignElements getAssignAccess() {
		return pAssign;
	}
	
	public ParserRule getAssignRule() {
		return getAssignAccess().getRule();
	}

	//Read returns Stat:
	//	{Read} name=ID ":=" "rd" "(" loc=INT ")";
	public ReadElements getReadAccess() {
		return pRead;
	}
	
	public ParserRule getReadRule() {
		return getReadAccess().getRule();
	}

	//Write returns Stat:
	//	{Write} "wr" "(" loc=INT "," exp=Expression ")";
	public WriteElements getWriteAccess() {
		return pWrite;
	}
	
	public ParserRule getWriteRule() {
		return getWriteAccess().getRule();
	}

	//Barrier returns Stat:
	//	{Barrier} "barrier";
	public BarrierElements getBarrierAccess() {
		return pBarrier;
	}
	
	public ParserRule getBarrierRule() {
		return getBarrierAccess().getRule();
	}

	//Block returns Stat:
	//	{Block} "{" (stats+=Statement ";")+ "}";
	public BlockElements getBlockAccess() {
		return pBlock;
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//LSwitch returns Stat:
	//	{LSwitch} "lswitch" (cases+=INT ":" stats+=Statement)+;
	public LSwitchElements getLSwitchAccess() {
		return pLSwitch;
	}
	
	public ParserRule getLSwitchRule() {
		return getLSwitchAccess().getRule();
	}

	//GSwitch returns Stat:
	//	{GSwitch} "gswitch" (cases+=INT ":" stats+=Statement)+;
	public GSwitchElements getGSwitchAccess() {
		return pGSwitch;
	}
	
	public ParserRule getGSwitchRule() {
		return getGSwitchAccess().getRule();
	}

	//Skip returns Stat:
	//	{Skip} "skip";
	public SkipElements getSkipAccess() {
		return pSkip;
	}
	
	public ParserRule getSkipRule() {
		return getSkipAccess().getRule();
	}

	//Expression returns Expr:
	//	Add;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Add returns Expr:
	//	Mul | {BinaryExpr} ({BinaryExpr.left=current} op=("+" | "-") right=Mul)*;
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}

	//Mul returns Expr:
	//	PrimaryExpression | {BinaryExpr} ({BinaryExpr.left=current} op=("*" | "/") right=PrimaryExpression)*;
	public MulElements getMulAccess() {
		return pMul;
	}
	
	public ParserRule getMulRule() {
		return getMulAccess().getRule();
	}

	//PrimaryExpression returns Expr:
	//	"(" Expression ")" | Var | Val | Gid | Lid;
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}

	//Var returns Expr:
	//	{Var} name=ID;
	public VarElements getVarAccess() {
		return pVar;
	}
	
	public ParserRule getVarRule() {
		return getVarAccess().getRule();
	}

	//Val returns Expr:
	//	{Val} val=INT;
	public ValElements getValAccess() {
		return pVal;
	}
	
	public ParserRule getValRule() {
		return getValAccess().getRule();
	}

	//Gid returns Expr:
	//	{Gid} "gid";
	public GidElements getGidAccess() {
		return pGid;
	}
	
	public ParserRule getGidRule() {
		return getGidAccess().getRule();
	}

	//Lid returns Expr:
	//	{Lid} "lid";
	public LidElements getLidAccess() {
		return pLid;
	}
	
	public ParserRule getLidRule() {
		return getLidAccess().getRule();
	}

	/// * Terminals * / terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return tINT;
	} 

	//terminal ID:
	//	("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return tID;
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
