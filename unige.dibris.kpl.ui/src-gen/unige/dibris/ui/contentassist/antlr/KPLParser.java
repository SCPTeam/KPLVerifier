/*
 * generated by Xtext
 */
package unige.dibris.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import unige.dibris.services.KPLGrammarAccess;

public class KPLParser extends AbstractContentAssistParser {
	
	@Inject
	private KPLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected unige.dibris.ui.contentassist.antlr.internal.InternalKPLParser createParser() {
		unige.dibris.ui.contentassist.antlr.internal.InternalKPLParser result = new unige.dibris.ui.contentassist.antlr.internal.InternalKPLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
					put(grammarAccess.getAddAccess().getAlternatives(), "rule__Add__Alternatives");
					put(grammarAccess.getAddAccess().getOpAlternatives_1_1_1_0(), "rule__Add__OpAlternatives_1_1_1_0");
					put(grammarAccess.getMulAccess().getAlternatives(), "rule__Mul__Alternatives");
					put(grammarAccess.getMulAccess().getOpAlternatives_1_1_1_0(), "rule__Mul__OpAlternatives_1_1_1_0");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getKernelAccess().getGroup(), "rule__Kernel__Group__0");
					put(grammarAccess.getProcedureAccess().getGroup(), "rule__Procedure__Group__0");
					put(grammarAccess.getDeclAccess().getGroup(), "rule__Decl__Group__0");
					put(grammarAccess.getBranchAccess().getGroup(), "rule__Branch__Group__0");
					put(grammarAccess.getLoopAccess().getGroup(), "rule__Loop__Group__0");
					put(grammarAccess.getInvokeAccess().getGroup(), "rule__Invoke__Group__0");
					put(grammarAccess.getAssignAccess().getGroup(), "rule__Assign__Group__0");
					put(grammarAccess.getReadAccess().getGroup(), "rule__Read__Group__0");
					put(grammarAccess.getWriteAccess().getGroup(), "rule__Write__Group__0");
					put(grammarAccess.getBarrierAccess().getGroup(), "rule__Barrier__Group__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getBlockAccess().getGroup_2(), "rule__Block__Group_2__0");
					put(grammarAccess.getLSwitchAccess().getGroup(), "rule__LSwitch__Group__0");
					put(grammarAccess.getLSwitchAccess().getGroup_2(), "rule__LSwitch__Group_2__0");
					put(grammarAccess.getGSwitchAccess().getGroup(), "rule__GSwitch__Group__0");
					put(grammarAccess.getGSwitchAccess().getGroup_2(), "rule__GSwitch__Group_2__0");
					put(grammarAccess.getSkipAccess().getGroup(), "rule__Skip__Group__0");
					put(grammarAccess.getAddAccess().getGroup_1(), "rule__Add__Group_1__0");
					put(grammarAccess.getAddAccess().getGroup_1_1(), "rule__Add__Group_1_1__0");
					put(grammarAccess.getMulAccess().getGroup_1(), "rule__Mul__Group_1__0");
					put(grammarAccess.getMulAccess().getGroup_1_1(), "rule__Mul__Group_1_1__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_0(), "rule__PrimaryExpression__Group_0__0");
					put(grammarAccess.getVarAccess().getGroup(), "rule__Var__Group__0");
					put(grammarAccess.getValAccess().getGroup(), "rule__Val__Group__0");
					put(grammarAccess.getGidAccess().getGroup(), "rule__Gid__Group__0");
					put(grammarAccess.getLidAccess().getGroup(), "rule__Lid__Group__0");
					put(grammarAccess.getKernelAccess().getNAssignment_1(), "rule__Kernel__NAssignment_1");
					put(grammarAccess.getKernelAccess().getMAssignment_3(), "rule__Kernel__MAssignment_3");
					put(grammarAccess.getKernelAccess().getProceduresAssignment_4(), "rule__Kernel__ProceduresAssignment_4");
					put(grammarAccess.getKernelAccess().getMainAssignment_6(), "rule__Kernel__MainAssignment_6");
					put(grammarAccess.getProcedureAccess().getZAssignment_1(), "rule__Procedure__ZAssignment_1");
					put(grammarAccess.getProcedureAccess().getXAssignment_2(), "rule__Procedure__XAssignment_2");
					put(grammarAccess.getProcedureAccess().getBodyAssignment_3(), "rule__Procedure__BodyAssignment_3");
					put(grammarAccess.getDeclAccess().getVarAssignment_2(), "rule__Decl__VarAssignment_2");
					put(grammarAccess.getDeclAccess().getBodyAssignment_4(), "rule__Decl__BodyAssignment_4");
					put(grammarAccess.getBranchAccess().getGuardAssignment_2(), "rule__Branch__GuardAssignment_2");
					put(grammarAccess.getBranchAccess().getLeftAssignment_4(), "rule__Branch__LeftAssignment_4");
					put(grammarAccess.getBranchAccess().getRightAssignment_6(), "rule__Branch__RightAssignment_6");
					put(grammarAccess.getLoopAccess().getGuardAssignment_2(), "rule__Loop__GuardAssignment_2");
					put(grammarAccess.getLoopAccess().getBodyAssignment_4(), "rule__Loop__BodyAssignment_4");
					put(grammarAccess.getInvokeAccess().getFunAssignment_1(), "rule__Invoke__FunAssignment_1");
					put(grammarAccess.getInvokeAccess().getArgAssignment_3(), "rule__Invoke__ArgAssignment_3");
					put(grammarAccess.getAssignAccess().getVarAssignment_1(), "rule__Assign__VarAssignment_1");
					put(grammarAccess.getAssignAccess().getExpAssignment_3(), "rule__Assign__ExpAssignment_3");
					put(grammarAccess.getReadAccess().getNameAssignment_1(), "rule__Read__NameAssignment_1");
					put(grammarAccess.getReadAccess().getLocAssignment_5(), "rule__Read__LocAssignment_5");
					put(grammarAccess.getWriteAccess().getLocAssignment_3(), "rule__Write__LocAssignment_3");
					put(grammarAccess.getWriteAccess().getExpAssignment_5(), "rule__Write__ExpAssignment_5");
					put(grammarAccess.getBlockAccess().getStatsAssignment_2_0(), "rule__Block__StatsAssignment_2_0");
					put(grammarAccess.getLSwitchAccess().getCasesAssignment_2_0(), "rule__LSwitch__CasesAssignment_2_0");
					put(grammarAccess.getLSwitchAccess().getStatsAssignment_2_2(), "rule__LSwitch__StatsAssignment_2_2");
					put(grammarAccess.getGSwitchAccess().getCasesAssignment_2_0(), "rule__GSwitch__CasesAssignment_2_0");
					put(grammarAccess.getGSwitchAccess().getStatsAssignment_2_2(), "rule__GSwitch__StatsAssignment_2_2");
					put(grammarAccess.getAddAccess().getOpAssignment_1_1_1(), "rule__Add__OpAssignment_1_1_1");
					put(grammarAccess.getAddAccess().getRightAssignment_1_1_2(), "rule__Add__RightAssignment_1_1_2");
					put(grammarAccess.getMulAccess().getOpAssignment_1_1_1(), "rule__Mul__OpAssignment_1_1_1");
					put(grammarAccess.getMulAccess().getRightAssignment_1_1_2(), "rule__Mul__RightAssignment_1_1_2");
					put(grammarAccess.getVarAccess().getNameAssignment_1(), "rule__Var__NameAssignment_1");
					put(grammarAccess.getValAccess().getValAssignment_1(), "rule__Val__ValAssignment_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			unige.dibris.ui.contentassist.antlr.internal.InternalKPLParser typedParser = (unige.dibris.ui.contentassist.antlr.internal.InternalKPLParser) parser;
			typedParser.entryRuleKernel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public KPLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(KPLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
